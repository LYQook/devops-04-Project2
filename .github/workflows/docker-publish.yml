name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: MY_AWS_REGION                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
  ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: MY_CONTAINER_NAME           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        env:
           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           REPOSITORY: my-ecr-repo
           IMAGE_TAG: ${{ github.sha }}
        run:
           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # run: |
      #   # Build a docker container and
      #   # push it to ECR so that it can
      #   # be deployed to ECS.
      #   docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #   docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #   echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

# name: Docker

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# on:
#   schedule:
#     - cron: '19 6 * * *'
#   push:
#     branches: [ "main" ]
#     # Publish semver tags as releases.
#     tags: [ 'v*.*.*' ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Use docker.io for Docker Hub if empty
#   REGISTRY: ghcr.io
#   # github.repository as <account>/<repo>
#   IMAGE_NAME: ${{ github.repository }}


# jobs:
#   build:

#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#       # This is used to complete the identity challenge
#       # with sigstore/fulcio when running outside of PRs.
#       id-token: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3



#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: "ap-northeast-2"

#       - name: Build, tag, and push docker image to Amazon ECR
#         env:
#           REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           REPOSITORY: my-ecr-repo
#           IMAGE_TAG: ${{ github.sha }}
#         run: |
#           docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG


#       # Install the cosign tool except on PR
#       # https://github.com/sigstore/cosign-installer
#       - name: Install cosign
#         if: github.event_name != 'pull_request'
#         uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
#         with:
#           cosign-release: 'v1.13.1'


#       # Workaround: https://github.com/docker/build-push-action/issues/461
#       - name: Setup Docker buildx
#         uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

#       # Login against a Docker registry except on PR
#       # https://github.com/docker/login-action
#       - name: Log into registry ${{ env.REGISTRY }}
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       # Extract metadata (tags, labels) for Docker
#       # https://github.com/docker/metadata-action
#       - name: Extract Docker metadata
#         id: meta
#         uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

#       # Build and push Docker image with Buildx (don't push on PR)
#       # https://github.com/docker/build-push-action
#       - name: Build and push Docker image
#         id: build-and-push
#         uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: type=gha
#           cache-to: type=gha,mode=max


